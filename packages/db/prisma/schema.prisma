//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

/// @@allow('all', true)
model User {
  id            String    @id() @default(cuid())
  name          String
  /// @email
  email         String    @unique()
  emailVerified DateTime?
  /// @password
  /// @omit
  password      String
  role          String    @default("user")
  image         String?
  createdPosts  Post[]
  accounts      Account[]
  sessions      Session[]
}

/// @@allow('all', true)
model Post {
  id        Int      @id() @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([name])
}

model Account {
  id                String  @id() @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}
