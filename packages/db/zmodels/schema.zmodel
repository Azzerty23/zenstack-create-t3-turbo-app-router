// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../../node_modules/.prisma/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

plugin prisma {
    provider = '@core/prisma'
    output = '../prisma/schema.prisma'
    format = true
}

plugin trpc {
  provider = '@zenstackhq/trpc'
  output = '../../api/src/generated'
  generateClientHelpers = 'next'
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @email @unique
    emailVerified DateTime?
    password      String   @password @omit
    role          String    @default("user")
    image         String?
    createdPosts  Post[]
    accounts      Account[]
    sessions      Session[]

    @@allow('all', true)
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    @@index([name])

    @@allow('all', true)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
